/* Abstract Data Type: B+Trees */

package pt.ist.fenixframework.adt.bplustree;

valueType java.util.TreeMap as GenericTreeMap {
    externalizeWith {
        Serializable pt.ist.fenixframework.adt.bplustree.AbstractNode.externalizeTreeMap();
    }
    internalizeWith pt.ist.fenixframework.adt.bplustree.AbstractNode.internalizeTreeMap();
}

class BPlusTree {}

class AbstractNode {}

class LeafNode extends AbstractNode {
    // key: any Serializable and Comparable
    // value: any Serializable
    GenericTreeMap<Comparable,java.io.Serializable> entries;
}

class InnerNode extends AbstractNode {
    // A B-Tree node contains M keys and M+1 children.  We represent the first
    // M children aggregated with a key and add a special LAST_KEY for the
    // M+1-th children.  This way the i-th child always contains elements
    // whose keys are less than the i-th key.
    // key: any Serializable and Comparable
    // value: an AbstractNode
    GenericTreeMap<Comparable,AbstractNode> subNodes;
}

relation AdtBPlusTreeHasRootNode {
    BPlusTree playsRole;
    AbstractNode playsRole root;
}

relation AdtNodeHasParent {
    AbstractNode playsRole {
	multiplicity *;
    }
    InnerNode playsRole parent;
}

relation AdtLeafNodeHasSibling {
    LeafNode playsRole previous;
    LeafNode playsRole next;
}


/* BPlusTree backed by Arrays */

valueType pt.ist.fenixframework.adt.bplustree.DoubleArray as BackingArrays {
    externalizeWith {
        Serializable pt.ist.fenixframework.adt.bplustree.AbstractNodeArray.externalizeArrays();
    }
    internalizeWith pt.ist.fenixframework.adt.bplustree.AbstractNodeArray.internalizeArrays();
}

class BPlusTreeArray {}

class AbstractNodeArray {}

class LeafNodeArray extends AbstractNodeArray {
    BackingArrays<java.io.Serializable> entries;
}

class InnerNodeArray extends AbstractNodeArray {
    BackingArrays<AbstractNodeArray> subNodes;
}

relation BPlusTreeArrayHasRootNode {
    BPlusTreeArray playsRole;
    AbstractNodeArray playsRole root;
}

relation NodeArrayHasParent {
    AbstractNodeArray playsRole {
    	multiplicity *;
    }
    InnerNodeArray playsRole parent;
}

relation LeafNodeArrayHasSibling {
    LeafNodeArray playsRole previous;
    LeafNodeArray playsRole next;
}