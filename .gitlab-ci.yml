image: dockerhub.dsi.tecnico.ulisboa.pt/fenix-framework/docker/java-fenix-framework:openjdk17

cache:
  paths:
    - .m2/
    - aggregate-tests/target/
    - core/target/
    - dml-compiler/target/
    - maven/atomic-maven-plugin/target/
    - maven/ff-maven-plugin/target/
    - maven/dml-maven-plugin/target/

default:
  before_script:
    - cp -R /opt/config_m2 ./.m2
    - export MAVEN_REPO_USER=$NEXUS_USERNAME
    - export MAVEN_REPO_PASS=$NEXUS_PASSWORD
    - export MAVEN_REPO_ID=fenix-framework-releases

stages:
  - Install, Lint and Test
  - Release
  - Deploy


Install, Lint and Test:
  stage: Install, Lint and Test
  script:
    - mvn -s .m2/settings.xml clean install
    - ./aggregate-tests/print_coverage_results.sh
  artifacts:
    when: always
    paths:
      - aggregate-tests/target/site/jacoco-aggregate
    expire_in: 1 day

Release:
  stage: Release
  script:
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_NAME"
    - echo "$DEPLOY_KEY" | tr -d '\r' > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H repo.dsi.tecnico.ulisboa.pt > ~/.ssh/known_hosts
    - if [ $(git tag -l "$RELEASE") ]; then log_error "Version $RELEASE already exists" && exit 1; fi
    - git checkout -B "$CI_BUILD_REF_NAME"
    - mvn -s .m2/settings.xml --batch-mode -Dtag=$RELEASE release:prepare -DreleaseVersion=$RELEASE -DdevelopmentVersion=DEV-SNAPSHOT
  only:
    refs:
      - master
    variables:
      - $RELEASE

Deploy:
  stage: Deploy
  script:
    - node /opt/gitlab-dsi/release.js $CI_PROJECT_ID $CI_COMMIT_TAG $REPO_API_ACCESS_TOKEN
    - mvn -s .m2/settings.xml --batch-mode deploy  -Dmaven.test.skip=true
    - node /opt/gitlab-dsi/notify-mattermost.js $CI_PROJECT_ID $CI_COMMIT_TAG $REPO_API_ACCESS_TOKEN $CHAT_HOOK
  only:
    - tags
