package pt.ist.fenixframework;

valueType java.lang.reflect.Method as PredicateMethod {
    externalizeWith {
        String toString();
    }
    internalizeWith pt.ist.fenixframework.consistencyPredicates.Externalization.internalizePredicateMethod();
}

/* MetaObjects, MetaClasses and ConsistencyPredicates */

class DomainFenixFrameworkRoot {
}

class DomainMetaClass {
	String domainClassName;
	Boolean initialized;
}

class consistencyPredicates.DomainConsistencyPredicate {
	PredicateMethod predicate;
	Boolean initialized;
}

	class consistencyPredicates.PublicConsistencyPredicate extends consistencyPredicates.DomainConsistencyPredicate {
	}
	
	class consistencyPredicates.FinalConsistencyPredicate extends consistencyPredicates.PublicConsistencyPredicate {
	}
	
	class consistencyPredicates.PrivateConsistencyPredicate extends consistencyPredicates.DomainConsistencyPredicate {
	}
	
class consistencyPredicates.DomainDependenceRecord {
}

class DomainMetaObject {
}

relation DomainRootDomainFenixFrameworkRoot {
    .pt.ist.fenixframework.DomainRoot playsRole domainRoot;
    DomainFenixFrameworkRoot playsRole domainFenixFrameworkRoot;
}

relation DomainFenixFrameworkRootDomainMetaClasses {
	DomainFenixFrameworkRoot playsRole domainFenixFrameworkRoot;
	DomainMetaClass playsRole domainMetaClass {
		multiplicity*;
	}
}

relation DomainMetaSuperclassDomainMetaSubclasses {
	DomainMetaClass playsRole domainMetaSuperclass;
	DomainMetaClass playsRole domainMetaSubclass {
		multiplicity*;
	}
}

relation DomainMetaObjectsDomainMetaClass {
	DomainMetaObject playsRole;
	DomainMetaClass playsRole domainMetaClass;
}

relation DomainMetaClassExistingDomainMetaObjects {
    .pt.ist.fenixframework.adt.bplustree.DomainBPlusTree playsRole existingDomainMetaObjects;
	DomainMetaClass playsRole;
}

relation DomainMetaClassDeclaredConsistencyPredicates {
	DomainMetaClass playsRole domainMetaClass;
	consistencyPredicates.DomainConsistencyPredicate playsRole declaredConsistencyPredicate {
		multiplicity*;
	}
}

relation PublicConsistencyPredicateOverriddenPublicConsistencyPredicatesOverriding {
	consistencyPredicates.PublicConsistencyPredicate playsRole publicConsistencyPredicateOverridden;
	consistencyPredicates.PublicConsistencyPredicate playsRole publicConsistencyPredicateOverriding {
		multiplicity*;
	}
}

relation DomainConsistencyPredicateDomainDependenceRecords {
	consistencyPredicates.DomainConsistencyPredicate playsRole domainConsistencyPredicate;
	consistencyPredicates.DomainDependenceRecord playsRole domainDependenceRecord {
		multiplicity*;
	}
}

relation DomainConsistencyPredicateInconsistentDependenceRecords {
	consistencyPredicates.DomainConsistencyPredicate playsRole inconsistentPredicate;
	consistencyPredicates.DomainDependenceRecord playsRole inconsistentDependenceRecord {
		multiplicity*;
	}
}

relation DependentDomainMetaObjectOwnDependenceRecords {
	DomainMetaObject playsRole dependentDomainMetaObject;
	consistencyPredicates.DomainDependenceRecord playsRole ownDependenceRecord {
		multiplicity*;
	}
}

relation DependedDomainMetaObjectsDependingDependenceRecords {
	DomainMetaObject playsRole dependedDomainMetaObject {
		multiplicity*;
	}
	consistencyPredicates.DomainDependenceRecord playsRole dependingDependenceRecord {
		multiplicity*;
	}
}

relation DomainMetaObjectAbstractDomainObject {
    .pt.ist.fenixframework.DomainObject playsRole domainObject;
	DomainMetaObject playsRole;
}
